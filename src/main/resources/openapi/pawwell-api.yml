openapi: 3.0.3
info:
  title: Dog Health Tracker API
  version: 1.0.0
  description: API for managing users in Dog Health Tracker.

servers:
  - url: http://localhost:8080/api/v1

security:
  - bearerAuth: []

paths:
  /users/{participant-id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: participant-id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ParticipantId'
          description: The identifier of the participant.
      responses:
        '200':
          description: GET operation was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized (invalid or missing token)

    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - Users
      parameters:
        - name: participant-id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ParticipantId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized (invalid or missing token)

    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      tags:
        - Users
      parameters:
        - name: participant-id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ParticipantId'
      responses:
        '204':
          description: User deleted successfully (no content)
        '404':
          description: User not found
        '401':
          description: Unauthorized (invalid or missing token)

  /users/{participant-id}/dog:
    get:
      summary: Get the dog for a given participant
      operationId: getDogByParticipantId
      tags:
        - Users
      parameters:
        - name: participant-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: GET operation was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized (invalid or missing token)

  /users/{participant-id}/dashboard:
    get:
      summary: Get the dashboard overview for a given participant
      operationId: getDashboardByParticipantId
      tags:
        - Users
      parameters:
        - name: participant-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: GET operation was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized (invalid or missing token)

  /dogs:
    post:
      summary: Add a new dog
      operationId: addDog
      tags:
        - Dogs
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DogRequest'
      responses:
        '201':
          description: Dog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogResponse'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized (invalid or missing token)

  /dogs/{dog-id}:
    get:
      summary: Get a dog by ID
      operationId: getDogById
      tags:
        - Dogs
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
      responses:
        '200':
          description: Dog fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogResponse'
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)
    put:
      summary: Update a dog by ID
      operationId: updateDogById
      tags:
        - Dogs
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog to update.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DogRequest'
      responses:
        '200':
          description: Dog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DogResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)

  /dogs/{dog-id}/weights:
    post:
      summary: Add a weight record for a dog
      operationId: addWeight
      tags:
        - Weight
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeightRequest'
      responses:
        '201':
          description: Weight record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeightResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog not found

    get:
      summary: Get all weight records for a dog
      operationId: getWeights
      tags:
        - Weight
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of weight records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeightResponse'
        '404':
          description: Dog not found

  /dogs/{dog-id}/weights/{weight-id}:
    delete:
      summary: Delete a weight record for a dog
      operationId: deleteWeight
      tags:
        - Weight
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
        - name: weight-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the weight record.
      responses:
        '204':
          description: Weight record deleted successfully
        '404':
          description: Dog or weight record not found
        '401':
          description: Unauthorized (invalid or missing token)

  /hormones/quiz:
    get:
      summary: Get hormone quiz questions
      operationId: getHormoneQuiz
      tags:
        - Hormones
      responses:
        '200':
          description: List of quiz questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HormoneQuestionList'
    post:
      summary: Submit hormone quiz answers
      operationId: submitHormoneQuiz
      tags:
        - Hormones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmission'
      responses:
        '201':
          description: Quiz answers submitted successfully
        '400':
          description: Invalid quiz submission

  /hormones/status:
    get:
      summary: Get hormone status results
      operationId: getHormoneStatus
      tags:
        - Hormones
      responses:
        '200':
          description: Hormone status per group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HormoneStatusResponse'

  /dogs/{dog-id}/dental:
    post:
      summary: Add a dental record for a dog
      operationId: addDentalRecord
      tags:
        - Dental
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DentalRequest'
      responses:
        '201':
          description: Dental record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DentalResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)

    get:
      summary: Get all dental records for a dog
      operationId: getDentalRecords
      tags:
        - Dental
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of dental records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DentalResponse'
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)

  /dogs/{dog-id}/dental/{dental-id}:
    get:
      summary: Get a dental record by ID
      operationId: getDentalById
      tags:
        - Dental
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: dental-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Dental record fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DentalResponse'
        '404':
          description: Dog or dental record not found

    put:
      summary: Update a dental record by ID
      operationId: updateDental
      tags:
        - Dental
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: dental-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DentalRequest'
      responses:
        '200':
          description: Dental record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DentalResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog or dental record not found

    delete:
      summary: Delete a dental record by ID
      operationId: deleteDental
      tags:
        - Dental
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: dental-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Dental record deleted successfully
        '404':
          description: Dog or dental record not found

  /dogs/{dog-id}/heart:
    post:
      summary: Add a heart record for a dog
      operationId: addHeartRecord
      tags:
        - Heart
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeartRequest'
      responses:
        '201':
          description: Heart record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)

    get:
      summary: Get all heart records for a dog
      operationId: getHeartRecords
      tags:
        - Heart
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of heart records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HeartResponse'
        '404':
          description: Dog not found
        '401':
          description: Unauthorized (invalid or missing token)

  /dogs/{dog-id}/heart/{heart-id}:
    get:
      summary: Get a heart record by ID
      operationId: getHeartById
      tags:
        - Heart
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: heart-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Heart record fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartResponse'
        '404':
          description: Dog or heart record not found

    put:
      summary: Update a heart record by ID
      operationId: updateHeartRecord
      tags:
        - Heart
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: heart-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeartRequest'
      responses:
        '200':
          description: Heart record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeartResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog or heart record not found

    delete:
      summary: Delete a heart record by ID
      operationId: deleteHeartRecord
      tags:
        - Heart
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: heart-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Heart record deleted successfully
        '404':
          description: Dog or heart record not found

  /mobility/quiz:
    get:
      summary: Get mobility quiz questions
      operationId: getMobilityQuiz
      tags:
        - Mobility
      responses:
        '200':
          description: List of quiz questions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobilityQuestionList'
    post:
      summary: Submit mobility quiz answers
      operationId: submitMobilityQuiz
      tags:
        - Mobility
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmission'
      responses:
        '201':
          description: Quiz answers submitted successfully
        '400':
          description: Invalid quiz submission

  /mobility/status:
    get:
      summary: Get mobility status results
      operationId: getMobilityStatus
      tags:
        - Mobility
      responses:
        '200':
          description: Mobility status per group and health highlights.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobilityStatusResponse'

    # ======================
    # HEALTH RECORD API
    # ======================
  /dogs/{dog-id}/health-records:
    post:
      summary: Upload a health record for a dog
      operationId: addHealthRecord
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthRecordRequest'
      responses:
        '201':
          description: Health record uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '400':
          description: Invalid request body
        '404':
          description: Dog not found
        '401':
          description: Unauthorized

    get:
      summary: Get all health records for a dog
      operationId: getHealthRecords
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
      responses:
        '200':
          description: List of health records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthRecordResponse'
        '404':
          description: Dog not found
        '401':
          description: Unauthorized

  /dogs/{dog-id}/health-records/{health-record-id}:
    get:
      summary: Get a health record by ID
      operationId: getHealthRecordById
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: health-record-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health record fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '404':
          description: Dog or health record not found
        '401':
          description: Unauthorized

    put:
      summary: Update a health record by ID
      operationId: updateHealthRecord
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: health-record-id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HealthRecordRequest'
      responses:
        '200':
          description: Health record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthRecordResponse'
        '404':
          description: Dog or health record not found
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized

    delete:
      summary: Delete a health record by ID
      operationId: deleteHealthRecord
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
        - name: health-record-id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Health record deleted successfully
        '404':
          description: Dog or health record not found
        '401':
          description: Unauthorized

  /dogs/{dog-id}/health-records/{health-record-id}/download:
    get:
      summary: Download a health record file
      operationId: downloadHealthRecord
      tags:
        - Health Records
      parameters:
        - name: dog-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the dog.
        - name: health-record-id
          in: path
          required: true
          schema:
            type: string
          description: The identifier of the health record.
      responses:
        '200':
          description: The binary file stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Dog or health record not found
        '401':
          description: Unauthorized

components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    # ======================
    # USER COMPONENTS
    # ======================
  schemas:
    ParticipantId:
      type: string
      example: "1234"

    UserResponse:
      type: object
      description: The user response.
      properties:
        participantId:
          type: string
          example: "1234"
        email:
          type: string
          format: email
          example: "user@example.com"
      required:
        - participantId
        - email

    UserUpdateRequest:
      type: object
      description: Request to update a user.
      properties:
        email:
          type: string
          format: email
          example: "simona@pawwell.com"
        password:
          type: string
          minLength: 8
          example: "password123"
      required:
        - email
        - password

    HealthHighlight:
      type: object
      description: The health highlight.
      properties:
        title:
          type: string
          example: Hearth condition risk
        description:
          type: string
          example: Fatigue can indicate an underlying heart issue.
        advice:
          type: string
          example: Book a cardiologist.

    QuizHighlight:
      type: object
      description: The quiz highlight.
      properties:
        title:
          type: string
          example: Hormonal Quiz
        description:
          type: string
          example: Answer 10 simple questions to help estimate your dog’s hormonal health by identifying signs related to the three most common hormonal issues.
        link:
          type: string
          format: uri
          description: "URL pointing to the quiz"
          example: "/hormones/quiz"

    # ======================
    # DOG COMPONENTS
    # ======================
    DogRequest:
      type: object
      description: Dog object used to create or update a dog.
      properties:
        name:
          type: string
          example: "Buddy"
        gender:
          $ref: '#/components/schemas/Gender'
        breed:
          type: string
          example: "Golden Retriever"
        birthDate:
          type: string
          format: date
          example: "2020-05-15"
        file:
          type: string
          format: binary
          description: File to upload (PDF, DOC, JPG, etc.)
        isNeutered:
          type: boolean
          example: true
      required:
        - name
        - gender
        - breed
        - birthDate
        - isNeutered

    DogResponse:
      type: object
      description: Dog object used to return a dog.
      properties:
        dogId:
          type: string
          example: "dog-123"
        ownerId:
          type: string
          example: "user-456"
        name:
          type: string
          example: "Buddy"
        gender:
          $ref: '#/components/schemas/Gender'
        breed:
          type: string
          example: "Golden Retriever"
        birthDate:
          type: string
          format: date
          example: "2020-05-15"
        photoUrl:
          type: string
          format: uri
          example: "https://example.com/example.jpg"
        isNeutered:
          type: boolean
          example: true

    DashboardResponse:
      type: object
      description: Dashboard object.
      properties:
        overallHealthIndex:
          type: number
          format: integer
          description: The number representing the overall health index.
          example: 7
        currentWeight:
          type: number
          format: float
          description: The current weight of the dog.
          example: 3.5
        yourProgress:
          type: number
          format: float
          description: Percentage value representing the profile progress.
          example: 75
          minimum: 0
          maximum: 100
        healthHighlights:
          type: array
          items:
            $ref: '#/components/schemas/HealthHighlight'
        quizHighlights:
          type: array
          items:
            $ref: '#/components/schemas/QuizHighlight'

    Gender:
      type: string
      enum: [ male, female ]
      example: male

    # ======================
    # WEIGHT COMPONENTS
    # ======================
    WeightRequest:
      type: object
      properties:
        current:
          type: number
          format: float
          example: 12.50
        date:
          type: string
          format: date-time
          example: "2025-09-17"
      required:
        - current

    WeightResponse:
      allOf:
        - $ref: '#/components/schemas/WeightRequest'
        - type: object
          properties:
            id:
              type: string
              example: "12345"
            goalWeightRange:
              $ref: '#/components/schemas/GoalWeightRange'
            status:
              $ref: '#/components/schemas/QuizCategoryStatus'
            healthHighlights:
              type: array
              description: List of relevant health insights related to weight.
              items:
                $ref: '#/components/schemas/HealthHighlight'

    GoalWeightRange:
      type: object
      description: The ideal weight range for a specific dog breed.
      properties:
        min:
          type: number
          format: float
          description: The minimum healthy weight (kg).
          example: 10.5
        max:
          type: number
          format: float
          description: The maximum healthy weight (kg).
          example: 15.0

    # ======================
    # HORMONE COMPONENTS
    # ======================
    HormoneQuestion:
      type: object
      properties:
        id:
          type: string
          example: q1
        category:
          $ref: '#/components/schemas/HormoneCategory'
        question:
          type: string
          example: "Is your dog’s coat becoming brittle, dry, or falling out more than usual?"
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswer'

    HormoneStatusResponse:
      type: object
      properties:
        thyroid:
          $ref: '#/components/schemas/QuizCategoryStatus'
        adrenal:
          $ref: '#/components/schemas/QuizCategoryStatus'
        pancreatic:
          $ref: '#/components/schemas/QuizCategoryStatus'

    QuizSubmission:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/QuizAnswer'
      example:
        q1: Always
        q2: Occasionally
        q3: Never

    QuizCategoryStatus:
      type: string
      enum: [green, yellow, red]
      example: green

    QuizAnswer:
      type: string
      enum: [Always, Frequently, Occasionally, Never]
      example: Always

    HormoneCategory:
      type: string
      enum: [thyroid, adrenal, pancreatic]
      example: thyroid

    HormoneQuestionList:
      type: array
      items:
        $ref: '#/components/schemas/HormoneQuestion'

    # ======================
    # MOBILITY COMPONENTS
    # ======================
    MobilityQuestion:
      type: object
      properties:
        id:
          type: string
          example: q1
        category:
          $ref: '#/components/schemas/MobilityCategory'
        question:
          type: string
          example: "Is your dog limping, skipping steps, or lifting a hind leg while walking or running?"
        options:
          type: array
          items:
            $ref: '#/components/schemas/QuizAnswer'

    MobilityStatusResponse:
      type: object
      properties:
        patellar luxation:
          $ref: '#/components/schemas/QuizCategoryStatus'
        hip dysplasia:
          $ref: '#/components/schemas/QuizCategoryStatus'
        arthritis:
          $ref: '#/components/schemas/QuizCategoryStatus'
        healthHighlights:
          type: array
          items:
            $ref: '#/components/schemas/HealthHighlight'

    MobilityCategory:
      type: string
      enum: [luxation, dysplasia, arthritis]
      example: luxation

    MobilityQuestionList:
      type: array
      items:
        $ref: '#/components/schemas/MobilityQuestion'

    # ======================
    # DENTAL COMPONENTS
    # ======================
    DentalRequest:
      type: object
      description: Request object to create or update a dental record.
      properties:
        plaqueStatus:
          $ref: '#/components/schemas/PlaqueStatus'
        toothLoss:
          type: boolean
          example: false
        gingivitisStatus:
          $ref: '#/components/schemas/GingivitisStatus'
        lastCleaningDate:
          type: string
          format: date
          example: "2025-09-01"
      required:
        - plaqueStatus
        - toothLoss
        - gingivitisStatus

    DentalResponse:
      allOf:
        - $ref: '#/components/schemas/DentalRequest'
        - type: object
          description: Dental record response with IDs.
          properties:
            dentalId:
              type: string
              example: "dl-123"
            dogId:
              type: string
              example: "dog-123"
            createdTs:
              type: string
              format: date-time
              example: "2025-09-20T10:15:30"

    PlaqueStatus:
      type: string
      description: Plaque level status
      enum: [HI, LO, NORM]
      example: HI

    GingivitisStatus:
      type: string
      description: Gum health status
      enum: [NONE, MILD, SEVERE]
      example: MILD

    # ======================
    # HEART COMPONENTS
    # ======================
    HeartRequest:
      type: object
      description: Request object to create or update a heart record.
      properties:
        fatigue:
          type: boolean
          example: false
        coughing:
          type: boolean
          example: false
        murmurStatus:
          $ref: '#/components/schemas/MurmurStatus'
        heartRate:
          type: number
          format: integer
          example: 120
        breathingRate:
          type: number
          format: integer
          description: The number of breaths per minute.
          example: 30
        lastDirofilariaPreventionDate:
          type: string
          format: date
          example: "2025-09-01"
      required:
        - fatigue
        - coughing
        - heartRate
        - breathingRate

    HeartResponse:
      allOf:
        - $ref: '#/components/schemas/HeartRequest'
        - type: object
          description: Heart record response.
          properties:
            heartId:
              type: string
              example: "hr-123"
            dogId:
              type: string
              example: "dog-123"
            createdTs:
              type: string
              format: date-time
              example: "2025-09-20T10:15:30"

    MurmurStatus:
      type: string
      description: Heart murmur status (grades I–VI or none)
      enum: [NONE, GRADE_I, GRADE_II, Grade_III, Grade_IV, Grade_V, Grade_VI]
      example: GRADE_II

    # ======================
    # HEALTH RECORDS COMPONENTS
    # ======================
    HealthRecordRequest:
      type: object
      description: The health record request.
      properties:
        file:
          type: string
          format: binary
          description: File to upload (PDF, DOC, JPG, etc.)
        documentName:
          type: string
          description: Document name/title
      required:
        - file
        - documentName

    HealthRecordResponse:
      type: object
      properties:
        healthRecordId:
          type: string
          example: "hr-123"
        dogId:
          type: string
          example: "dog-123"
        documentName:
          type: string
          example: "Vaccination Record"
        documentUrl:
          type: string
          format: uri
          example: "https://example.com/example.pdf"
        contentType:
          type: string
          example: "application/pdf"
          description: The type of the uploaded file (pdf, doc, image, etc.)
        createdTs:
          type: string
          format: date-time
          example: "2025-09-27T14:35:00"